import { App, PluginSettingTab, Setting } from 'obsidian';
import { GroqPluginInterface } from '../types/plugin';
import { HistoryStorageMethod } from '../types/settings';
import { Notice } from 'obsidian';
import { isValidFileName } from '../utils/validation';
import { t, Locale } from '../localization';
import type { RateLimitsType } from '../services/groqService';
import type { GroqChatSettings } from './GroqChatSettings';

export class GroqChatSettingsTab extends PluginSettingTab {
  constructor(
    app: App,
    private readonly plugin: GroqPluginInterface,
  ) {
    super(app, plugin);
  }

  display(): void {
    const locale = (this.plugin.settings.language || 'ru') as Locale;
    this.containerEl.empty();
    // --- –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
    const title = this.containerEl.createEl('h2', {
      text: locale === 'ru' ? 'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PolyChat Plugin!' : 'üöÄ Welcome to PolyChat Plugin Settings!'
    });
    title.style.marginTop = '0.5em';
    title.style.fontSize = '2em';
    title.style.fontWeight = 'bold';
    const subtitle = this.containerEl.createEl('div', {
      text: locale === 'ru'
        ? '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–ª–∞–≥–∏–Ω –ø–æ–¥ —Å–µ–±—è, —á—Ç–æ–±—ã –æ–±—â–µ–Ω–∏–µ —Å –ò–ò –±—ã–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º! üòä'
        : 'Make your AI chat experience as friendly and delightful as possible! üòä'
    });
    subtitle.style.marginBottom = '1.5em';
    subtitle.style.fontSize = '1.15em';
    subtitle.style.color = '#555';
    // --- API ---
    this.containerEl.createEl('h3', { text: locale === 'ru' ? 'üîë –î–æ—Å—Ç—É–ø –∫ API' : 'üîë API Access' });
    // --- –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ---
    const tokenLink = this.containerEl.createEl('div');
    tokenLink.style.marginBottom = '1em';
    tokenLink.innerHTML = locale === 'ru'
      ? '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Groq –º–æ–∂–Ω–æ –Ω–∞ <a href="https://console.groq.com/keys" target="_blank" rel="noopener noreferrer">–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ Groq API</a>.'
      : 'You can get your Groq token at the <a href="https://console.groq.com/keys" target="_blank" rel="noopener noreferrer">official Groq API website</a>.';
    this.addApiKeySetting(locale);

    this.containerEl.createEl('h3', { text: locale === 'ru' ? 'ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏' : 'ü§ñ Model Selection' });
    this.addModelSetting(locale);
    // --- –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞) ---
    this.addModelListBlock(locale);
    // --- –ò—Å—Ç–æ—Ä–∏—è ---
    this.containerEl.createEl('h3', { text: locale === 'ru' ? 'üïì –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞' : 'üïì Chat History' });
    this.addHistorySettings(locale);
    // --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
    this.containerEl.createEl('h3', { text: locale === 'ru' ? 'üëÄ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —è–∑—ã–∫' : 'üëÄ Interface & Language' });
    // this.addDisplayModeSetting(locale); // –ú–µ—Ç–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    // --- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –º–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã –≤ —Å–µ—Ç–∫–µ ---
    const flexGrid = document.createElement('div');
    flexGrid.style.display = 'flex';
    flexGrid.style.gap = '16px';
    flexGrid.style.alignItems = 'flex-end';
    const tempDiv = document.createElement('div');
    tempDiv.style.flex = '1';
    tempDiv.appendChild(this.createTemperatureSetting(locale));
    const tokensDiv = document.createElement('div');
    tokensDiv.style.flex = '1';
    tokensDiv.appendChild(this.createMaxTokensSetting(locale));
    flexGrid.appendChild(tempDiv);
    flexGrid.appendChild(tokensDiv);
    this.containerEl.appendChild(flexGrid);
    this.addLanguageSetting(locale);

    // --- –ö–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" ---
    const actionsBlock = document.createElement('div');
    actionsBlock.style.margin = '32px 0 0 0';
    actionsBlock.style.display = 'flex';
    actionsBlock.style.gap = '16px';
    actionsBlock.style.justifyContent = 'flex-end';
    const btnSave = document.createElement('button');
    btnSave.textContent = locale === 'ru' ? '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : '‚úÖ Save all settings';
    btnSave.className = 'mod-cta';
    btnSave.onclick = async () => {
      await this.plugin.saveSettings();
      new Notice(locale === 'ru' ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' : 'Settings saved');
    };
    const btnReset = document.createElement('button');
    btnReset.textContent = locale === 'ru' ? '‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' : '‚ôªÔ∏è Reset to default';
    btnReset.onclick = async () => {
      if (typeof this.plugin.resetSettingsToDefault === 'function') {
        await this.plugin.resetSettingsToDefault();
        new Notice(locale === 'ru' ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã' : 'Settings reset');
        this.display();
      } else {
        new Notice(locale === 'ru' ? '–ú–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω' : 'Reset method not implemented');
      }
    };
    actionsBlock.appendChild(btnSave);
    actionsBlock.appendChild(btnReset);
    this.containerEl.appendChild(actionsBlock);

    // --- –ë–ª–æ–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä—É ---
    const thanksBlock = this.containerEl.createEl('div');
    thanksBlock.style.margin = '2em 0 1em 0';
    thanksBlock.style.padding = '1em';
    thanksBlock.style.borderRadius = '8px';
    thanksBlock.style.textAlign = 'center';
    thanksBlock.style.transition = 'background 0.3s, color 0.3s';
    thanksBlock.style.background = 'linear-gradient(90deg, var(--background-modifier-box-hover, #f2f3f5) 0%, var(--background-secondary, #fcb69f) 100%)';
    thanksBlock.style.color = 'var(--text-normal, #222)';
    thanksBlock.style.border = '1px solid var(--background-modifier-border, #ddd)';
    // –∞–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    if (document.body.classList.contains('theme-dark')) {
      thanksBlock.style.background = 'linear-gradient(90deg, var(--background-secondary, #23272e) 0%, #3a3f4b 100%)';
      thanksBlock.style.color = 'var(--text-normal, #eee)';
      thanksBlock.style.border = '1px solid var(--background-modifier-border, #333)';
    }
    thanksBlock.innerHTML = locale === 'ru'
      ? '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PolyChat Plugin! <br> –í—ã –º–æ–∂–µ—Ç–µ <a href="https://yoomoney.ru/fundraise/194GT5A5R07.250321" target="_blank" rel="noopener noreferrer">–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –Ω–∞ YooMoney</a> <br> <a href="https://github.com/semernyakov" target="_blank" rel="noopener noreferrer">–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ Github</a> –∏–ª–∏ <a href="https://t.me/semernyakov" target="_blank" rel="noopener noreferrer"> –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤ Telegram</a> ‚ù§Ô∏è'
      : 'Thank you for using PolyChat Plugin! <br> You can <a href="https://yoomoney.ru/fundraise/194GT5A5R07.250321" target="_blank" rel="noopener noreferrer">support the author on YooMoney</a> <br> <a href="https://github.com/semernyakov" target="_blank" rel="noopener noreferrer">Leave a review on Github</a> or <a href="https://t.me/semernyakov" target="_blank" rel="noopener noreferrer">contact me in Telegram</a> ‚ù§Ô∏è';
  }

  private createTemperatureSetting(locale: Locale): HTMLElement {
    const wrapper = document.createElement('div');
    new Setting(wrapper)
      .setName(t('temperature', locale))
      .setDesc(
        (locale === 'ru'
          ? '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (0-2)'
          : 'Controls randomness of responses (0-2)') + ' ',
      )
      .addSlider(slider =>
        slider
          .setLimits(0, 2, 0.1)
          .setValue(this.plugin.settings.temperature)
          .setDynamicTooltip()
          .onChange(async value => {
            this.plugin.settings.temperature = value;
            await this.plugin.saveSettings();
            this.showSavedIcon(slider.sliderEl);
          }),
      )
      .settingEl.setAttribute(
        'title',
        locale === 'ru'
          ? '–ß–µ–º –≤—ã—à–µ, —Ç–µ–º –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã'
          : 'Higher = more creative responses',
      );
    return wrapper;
  }

  private createMaxTokensSetting(locale: Locale): HTMLElement {
    const wrapper = document.createElement('div');
    new Setting(wrapper)
      .setName(t('maxTokens', locale))
      .setDesc(
        (locale === 'ru'
          ? '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ'
          : 'Maximum number of tokens in response') +
          (locale === 'ru' ? ' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2048)' : ' (e.g. 2048)'),
      )
      .addText(text =>
        text
          .setPlaceholder(locale === 'ru' ? '–ù–∞–ø—Ä–∏–º–µ—Ä: 2048' : 'e.g. 2048')
          .setValue(this.plugin.settings.maxTokens.toString())
          .onChange(async value => {
            const num = Math.max(1, Math.min(32768, parseInt(value) || 4096));
            this.plugin.settings.maxTokens = num;
            await this.plugin.saveSettings();
            this.showSavedIcon(text.inputEl);
          }),
      );
    return wrapper;
  }

  private showSavedIcon(targetEl: HTMLElement) {
    const icon = document.createElement('span');
    icon.textContent = '‚úì';
    icon.style.color = '#3cb371';
    icon.style.marginLeft = '8px';
    icon.style.fontWeight = 'bold';
    icon.style.fontSize = '16px';
    icon.style.transition = 'opacity 0.5s';
    targetEl.parentElement?.appendChild(icon);
    setTimeout(() => {
      icon.style.opacity = '0';
      setTimeout(() => icon.remove(), 500);
    }, 1200);
  }

  private addApiKeySetting(locale: Locale): void {
    new Setting(this.containerEl)
      .setName(t('apiKey', locale))
      .setDesc(
        locale === 'ru' ? '–í–∞—à –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Groq API' : 'Your key for accessing Groq API',
      )
      .addText(text =>
        text
          .setPlaceholder(t('apiKeyPlaceholder', locale))
          .setValue(this.plugin.settings.apiKey)
          .onChange(async value => {
            this.plugin.settings.apiKey = value.trim();
            await this.plugin.saveSettings();
            this.showSavedIcon(text.inputEl);
          }),
      )
      .addButton(btn =>
        btn
          .setButtonText(t('checkApiKey', locale))
          .setCta()
          .onClick(async () => {
            const isValid = await this.plugin.authService.validateApiKey(this.plugin.settings.apiKey);
            new Notice(isValid ? t('validApiKey', locale) : t('invalidApiKey', locale));
          }),
      );
  }

  private async fetchGroqModels(apiKey: string): Promise<any[]> {
    try {
      const resp = await fetch('https://api.groq.com/openai/v1/models', {
        headers: { Authorization: `Bearer ${apiKey}` },
      });
      if (!resp.ok) throw new Error('API error');
      const data = await resp.json();
      return data.data || [];
    } catch (error) {
      return [];
    }
  }

  private addModelSetting(locale: Locale): void {
    const setting = new Setting(this.containerEl)
      .setName(t('model', locale))
      .setDesc(
        locale === 'ru'
          ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤'
          : 'Select model for generating responses',
      );

    // Dropdown –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    let dropdownEl: HTMLSelectElement | null = null;
    const updateDropdown = () => {
      if (!dropdownEl) return;
      const settings = this.plugin.settings as GroqChatSettings;
      const models: { id: string; name: string; description?: string; isActive?: boolean }[] = (
        settings.groqAvailableModels || []
      ).filter(m => m.isActive !== false);
      dropdownEl.innerHTML = '';
      if (models.length === 0) {
        const opt = document.createElement('option');
        opt.value = 'none';
        opt.textContent = t('noModelsFound', locale);
        if (dropdownEl) dropdownEl.appendChild(opt);
      } else {
        models.forEach(model => {
          const opt = document.createElement('option');
          opt.value = model.id;
          opt.textContent = model.name;
          if (dropdownEl) dropdownEl.appendChild(opt);
        });
      }
      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é
      if (settings.model && !models.some(m => m.id === settings.model)) {
        settings.model = models[0]?.id || 'none';
      }
      dropdownEl.value = settings.model || (models[0]?.id ?? 'none');
    };
    const dropdown = setting.addDropdown(dropdown => {
      dropdownEl = dropdown.selectEl;
      updateDropdown();
      dropdown
        .setValue(
          (this.plugin.settings as GroqChatSettings).model ||
            (dropdownEl.options[0]?.value ?? 'none'),
        )
        .onChange(async value => {
          (this.plugin.settings as GroqChatSettings).model = value;
          await this.plugin.saveSettings();
          this.showSavedIcon(dropdownEl!);
        });
    });

    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    setting.addExtraButton(btn => {
      btn
        .setIcon('refresh-cw')
        .setTooltip(t('refreshModels', locale))
        .onClick(async () => {
          btn.setDisabled(true);
          btn.extraSettingsEl.classList.add('mod-spinner');
          const apiModels = await this.fetchGroqModels(this.plugin.settings.apiKey);
          if (apiModels.length > 0) {
            const settings = this.plugin.settings as GroqChatSettings;
            settings.groqAvailableModels = apiModels.map((m: any) => ({
              id: m.id,
              name: m.name || m.id,
              description: m.description || '',
              isActive: true,
            }));
            await this.plugin.saveSettings();
            new Notice(t('modelsUpdated', locale));
            updateDropdown();
          } else {
            new Notice(t('modelsUpdateError', locale));
          }
          btn.setDisabled(false);
          btn.extraSettingsEl.classList.remove('mod-spinner');
        });
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –º–µ—Ç–æ–¥ addModelListBlock, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—è—Ç—å dropdown
    const origAddModelListBlock = this.addModelListBlock.bind(this);
    this.addModelListBlock = (loc: Locale) => {
      origAddModelListBlock(loc);
      updateDropdown();
    };
  }

  // --- –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (—Ç–∞–±–ª–∏—Ü–∞, –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞) ---
  private addModelListBlock(locale: Locale) {
    // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥–µ–ª–µ–π
    let modelsBlock = this.containerEl.querySelector('.groq-models-block') as HTMLDivElement | null;
    if (!modelsBlock) {
      modelsBlock = document.createElement('div');
      modelsBlock.className = 'groq-models-block';
      this.containerEl.appendChild(modelsBlock);
    }
    modelsBlock.innerHTML = '';
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    type DisplayModel = {
      id: string;
      name: string;
      description?: string;
      created?: number;
      owned_by?: string;
      object?: string;
      isActive?: boolean;
      category?: string;
      developer?: { name: string; url?: string };
      maxTokens?: number;
      tokensPerMinute?: number;
      releaseStatus?: string;
    };
    const settings = this.plugin.settings as GroqChatSettings;
    let models: DisplayModel[] = (settings.groqAvailableModels || []) as DisplayModel[];
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ isActive —É –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    models = models.map(m => ({
      ...m,
      isActive: typeof m.isActive === 'boolean' ? m.isActive : true,
    }));
    const rateLimits: RateLimitsType = settings.groqRateLimits || {};
    // --- –ö–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ" ---
    const selectAllBlock = document.createElement('div');
    selectAllBlock.style.margin = '8px 0 8px 0';
    selectAllBlock.style.display = 'flex';
    selectAllBlock.style.gap = '8px';
    const btnSelectAll = document.createElement('button');
    btnSelectAll.textContent = locale === 'ru' ? '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ' : 'Select all';
    btnSelectAll.className = 'mod-cta';
    const btnDeselectAll = document.createElement('button');
    btnDeselectAll.textContent = locale === 'ru' ? '–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ' : 'Deselect all';
    // --- –¢–∞–±–ª–∏—Ü–∞ ---
    const modelsTable = document.createElement('table');
    modelsTable.className = 'groq-models-table';
    modelsTable.style.width = '100%';
    modelsTable.style.borderCollapse = 'collapse';
    modelsTable.style.fontSize = '13px';
    modelsTable.style.margin = '24px 0 24px 0';
    modelsTable.innerHTML = `
      <thead><tr style='background:#f0f0f0;'>
        <th style='text-align:left;padding:4px 8px;'>${t('model', locale)}</th>
        <th style='text-align:left;padding:4px 8px;'>${t('active', locale)}</th>
      </tr></thead>
      <tbody></tbody>
    `;
    const tbody = modelsTable.querySelector('tbody') as HTMLTableSectionElement;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const checkboxes: HTMLInputElement[] = [];
    models.forEach((model, idx) => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td style='padding:4px 8px;'>${model.name.replace(' (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)', '')}</td>
        <td style='padding:4px 8px;'></td>
      `;
      // Toggle –¥–ª—è "–ê–∫—Ç–∏–≤–Ω–∞"
      const toggleTd = tr.children[1] as HTMLTableCellElement;
      const toggle = document.createElement('input');
      toggle.type = 'checkbox';
      toggle.checked = (model as any).isActive !== false;
      toggle.style.transform = 'scale(1.2)';
      toggle.title =
        locale === 'ru' ? '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞' : 'Enable/disable model for chat';
      toggle.addEventListener('change', async () => {
        (models[idx] as any).isActive = toggle.checked;
        settings.groqAvailableModels = [...models];
        await this.plugin.saveSettings();
        this.showSavedIcon(toggle);
      });
      toggleTd.appendChild(toggle);
      checkboxes.push(toggle);
      tbody.appendChild(tr);
    });
    // –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
    btnSelectAll.onclick = async () => {
      checkboxes.forEach((cb, idx) => {
        cb.checked = true;
        (models[idx] as any).isActive = true;
      });
      settings.groqAvailableModels = [...models];
      await this.plugin.saveSettings();
    };
    btnDeselectAll.onclick = async () => {
      checkboxes.forEach((cb, idx) => {
        cb.checked = false;
        (models[idx] as any).isActive = false;
      });
      settings.groqAvailableModels = [...models];
      await this.plugin.saveSettings();
    };
    selectAllBlock.appendChild(btnSelectAll);
    selectAllBlock.appendChild(btnDeselectAll);
    modelsBlock.appendChild(selectAllBlock);
    modelsBlock.appendChild(modelsTable);
  }

  private addHistorySettings(locale: Locale): void {
    new Setting(this.containerEl)
      .setName(t('history', locale))
      .setDesc(
        locale === 'ru'
          ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏'
          : 'Select storage method and maximum history length',
      )
      .addDropdown(dropdown => {
        dropdown
          .addOption('memory', locale === 'ru' ? '–í –ø–∞–º—è—Ç–∏' : 'In memory')
          .addOption('localStorage', locale === 'ru' ? 'Local Storage' : 'Local Storage')
          .addOption('indexedDB', locale === 'ru' ? 'IndexedDB' : 'IndexedDB')
          .addOption('file', locale === 'ru' ? '–í —Ñ–∞–π–ª–µ' : 'In file')
          .setValue(this.plugin.settings.historyStorageMethod)
          .onChange(async value => {
            this.plugin.settings.historyStorageMethod = value as HistoryStorageMethod;
            await this.plugin.saveSettings();
            this.display();
          });
      })
      .addText(text => {
        text
          .setPlaceholder(t('historyLengthPlaceholder', locale))
          .setValue(this.plugin.settings.maxHistoryLength.toString())
          .onChange(async value => {
            const num = parseInt(value);
            this.plugin.settings.maxHistoryLength = !isNaN(num) && num >= 0 ? num : 0;
            await this.plugin.saveSettings();
          });
        text.inputEl.insertAdjacentHTML(
          'afterend',
          `<span style="font-size: var(--font-ui-smaller, 0.85em); margin-left: 5px;">(${locale === 'ru' ? '0 = –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å' : '0 = do not store'})</span>`,
        );
        text.inputEl.type = 'number';
        text.inputEl.min = '0';
      })
      .settingEl.setAttribute('title', locale === 'ru' ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏' : 'History settings');

    if (this.plugin.settings.historyStorageMethod === 'file') {
      new Setting(this.containerEl)
        .setName(t('historyFile', locale))
        .setDesc(
          locale === 'ru'
            ? '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ "–í —Ñ–∞–π–ª–µ")'
            : 'Path to file for storing history (if "In file" method is selected)',
        )
        .addText(text =>
          text
            .setPlaceholder(t('historyFilePlaceholder', locale))
            .setValue(this.plugin.settings.notePath)
            .onChange(async value => {
              const trimmedValue = value.trim();
              if (isValidFileName(trimmedValue)) {
                this.plugin.settings.notePath = trimmedValue;
                await this.plugin.saveSettings();
                this.showSavedIcon(text.inputEl);
              } else {
                new Notice(
                  locale === 'ru' ? '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è/–ø—É—Ç—å —Ñ–∞–π–ª–∞' : 'Invalid file name/path',
                );
              }
            }),
        )
        .settingEl.insertAdjacentHTML(
          'beforeend',
          `<p style="font-size: var(--font-ui-smaller, 0.85em); margin-top: 5px;">${locale === 'ru' ? '–ü—Ä–∏–º–µ—Ä: notes/history.md' : 'Example: notes/history.md'}</p>`,
        );
    }
  }

  private addLanguageSetting(locale: Locale): void {
    new Setting(this.containerEl)
      .setName(t('language', locale))
      .setDesc(locale === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞' : 'Select UI language')
      .addDropdown(dropdown => {
        dropdown
          .addOption('ru', '–†—É—Å—Å–∫–∏–π')
          .addOption('en', 'English')
          .setValue(this.plugin.settings.language)
          .onChange(async value => {
            this.plugin.settings.language = value as 'ru' | 'en';
            await this.plugin.saveSettings();
            this.display(); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          });
      });
  }
}
