import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import { exec } from 'child_process';
import esbuildCopyStaticFiles from 'esbuild-copy-static-files';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the GitHub repository of this plugin
*/`;

const isProduction = process.argv.includes('production');

const baseConfig = {
  banner: { js: banner },
  entryPoints: ['src/main.ts'],
  bundle: true,
  platform: 'node',
  external: ['obsidian', 'electron', '@codemirror/*', '@lezer/*', ...builtins],
  format: 'cjs',
  target: 'es2020',
  logLevel: 'info',
  sourcemap: !isProduction ? 'inline' : false,
  minify: isProduction,
  outdir: 'dist',
  treeShaking: true,
  plugins: [
    esbuildCopyStaticFiles({
      src: './src/static',
      dest: './dist',
      recursive: true,
    }),
  ],
};

(async () => {
  const context = await esbuild.context(baseConfig);

  if (isProduction) {
    await context.rebuild();
    console.log('✅ Production build completed!');
  } else {
    await context.watch();
    console.log('👀 Watching for changes...');

    await context
      .serve({
        servedir: 'dist',
        port: 3000,
      })
      .then(() => {
        console.log('🔥 Hotreload server started at http://localhost:3000');
        exec('obsidian', (err, stdout, stderr) => {
          if (err) {
            console.error('❌ Error starting Obsidian:', err);
            return;
          }
          console.log('🚀 Obsidian started successfully');
          console.log(stdout);
          console.error(stderr);
        });
      })
      .catch(err => console.error('❌ Error starting server:', err));
  }

  // Handle Ctrl+C event
  process.on('SIGINT', async () => {
    console.log('🛑 Gracefully shutting down...');
    await context.dispose();
    process.exit(0);
  });
})();
